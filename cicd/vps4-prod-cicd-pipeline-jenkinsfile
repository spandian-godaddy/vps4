import hudson.model.*
import groovy.transform.Field

@Field def VPS4_VERSION
@Library('ECM@master') _
pipeline {
    agent { label "vps4-test-slave" }
    options { 
        skipStagesAfterUnstable()
        timestamps()
    }
    stages {
        stage("Open Change Request") {
            steps {
                load("/home/jenkins/vps4_latest_version.properties")
                slackSend(color: '#00CD48', message: "vps4 *STARTING PROD DEPLOYMENT*.  Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
                echo "vps4 version: ${VPS4_VERSION}"

                script {
                    env.CHANGE_REQUEST_ID = openChangeRequest(url:'https://godaddy.service-now.com/api/now/table/change_request',
                                            assignmentGroup:'Dev-Vps4',
                                            credentialsId:'2f9c93a6-a0a1-4b4f-bb56-f45590a033b1',
                                            commit:"{$VPS4_VERSION}",
                                            message:"Link ${env.BUILD_URL}")
                }

                echo "Change Order: https://godaddy.service-now.com/nav_to.do?uri=%2Fchange_request.do?sys_id=${env.CHANGE_REQUEST_ID}"
            }
        }

        stage ("Promote RPMs") {
            steps {
                load("/home/jenkins/vps4_latest_version.properties")
                echo "Promote vps4 version ${VPS4_VERSION} to PROD repo"
                build job: 'Prod-Promote', parameters: [string(name: 'VPS4_VERSION', value: VPS4_VERSION)]
            }
        }

        stage ("Deploy to AMS3") {
            steps {
                load("/home/jenkins/vps4_latest_version.properties")
                echo "vps4 version: ${VPS4_VERSION}"
                echo "Deploying to AMS3"
                build job: 'deployment/deploy_to_prod_ams3', parameters: [string(name: 'VPS4_VERSION', value: VPS4_VERSION)]
                productStampZk("prod_ams3", "vps4-web-${VPS4_VERSION}.noarch", "vps4-web")
                productStampZk("prod_ams3", "vps4-message-consumer-${VPS4_VERSION}.noarch", "vps4-message-consumer")
                productStampZk("prod_ams3", "vps4-orchestration-plugin-${VPS4_VERSION}.noarch", "hfs-engine")
                productStampZkAndWait("prod_ams3", "vps4-scheduler-${VPS4_VERSION}.noarch", "vps4-scheduler")
                slackSend(color: '#00CD48', message: "vps4 *DEPLOY TO PROD_AMS3* was SUCCESSFUL. Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
            }
        }

        stage("Prod N3 Smoke Test") {
            options {
                timeout(time:45, unit:'MINUTES')
            }
            steps {
                load("/home/jenkins/vps4_latest_version.properties")
                echo "vps4 version: ${VPS4_VERSION}"
                build job: 'prod_n3_phase_3_test', parameters: [string(name: 'VPS4_VERSION', value: VPS4_VERSION)]
                slackSend(color: '#00CD48', message: "Post Deploy *N3 SMOKE TEST* was SUCCESSFUL. Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
            }
        }

        stage("Deploy to Prod") {
            parallel {
                stage("Deploy to SG2") {
                    steps {
                        load("/home/jenkins/vps4_latest_version.properties")
                        echo "vps4 version: ${VPS4_VERSION}"
                        echo "Deploying to SG2"
                        build job: 'deployment/deploy_to_prod_sin2', parameters: [string(name: 'VPS4_VERSION', value: VPS4_VERSION)]
                        productStampZk("prod_sin2", "vps4-web-${VPS4_VERSION}.noarch", "vps4-web")
                        productStampZk("prod_sin2", "vps4-message-consumer-${VPS4_VERSION}.noarch", "vps4-message-consumer")
                        productStampZk("prod_sin2", "vps4-orchestration-plugin-${VPS4_VERSION}.noarch", "hfs-engine")
                        productStampZkAndWait("prod_sin2", "vps4-scheduler-${VPS4_VERSION}.noarch", "vps4-scheduler")
                        slackSend(color: '#00CD48', message: "vps4 *DEPLOY TO PROD_SIN2* was SUCCESSFUL. Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
                    }
                }

                stage ("Deploy to A2") {
                    steps {
                        load("/home/jenkins/vps4_latest_version.properties")
                        echo "vps4 version: ${VPS4_VERSION}"
                        echo "Deploying to A2"
                        build job: 'deployment/deploy_to_prod_a2', parameters: [string(name: 'VPS4_VERSION', value: VPS4_VERSION)]
                        productStampZk("prod_a2", "vps4-web-${VPS4_VERSION}.noarch", "vps4-web")
                        productStampZk("prod_a2", "vps4-message-consumer-${VPS4_VERSION}.noarch", "vps4-message-consumer")
                        productStampZk("prod_a2", "vps4-orchestration-plugin-${VPS4_VERSION}.noarch", "hfs-engine")
                        productStampZkAndWait("prod_a2", "vps4-scheduler-${VPS4_VERSION}.noarch", "vps4-scheduler")
                        slackSend(color: '#00CD48', message: "vps4 *DEPLOY TO PROD_IAD2* was SUCCESSFUL. Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
                    }
                }

                stage ("Deploy to P3") {
                    steps {
                        load("/home/jenkins/vps4_latest_version.properties")
                        echo "vps4 version: ${VPS4_VERSION}"
                        echo "Deploying to P3"
                        build job: 'deployment/deploy_to_prod_phx3', parameters: [string(name: 'VPS4_VERSION', value: VPS4_VERSION)]
                        productStampZk("prod_phx3", "vps4-web-${VPS4_VERSION}.noarch", "vps4-web")
                        productStampZk("prod_phx3", "vps4-message-consumer-${VPS4_VERSION}.noarch", "vps4-message-consumer")
                        productStampZk("prod_phx3", "vps4-orchestration-plugin-${VPS4_VERSION}.noarch", "hfs-engine")
                        productStampZkAndWait("prod_phx3", "vps4-scheduler-${VPS4_VERSION}.noarch", "vps4-scheduler")
                        slackSend(color: '#00CD48', message: "vps4 *DEPLOY TO PROD_PHX3* was SUCCESSFUL. Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
                    }
                }
            }
        }

        stage("Close Change Request") {
            steps {
                echo "Closing change request"
                closeChangeRequest url:'https://godaddy.service-now.com/api/now/table/change_request',
                        credentialsId:'2f9c93a6-a0a1-4b4f-bb56-f45590a033b1'
            }
        }

        stage("Restart Proxymanager Service in Prod") {
            steps {
                load("/home/jenkins/vps4_latest_version.properties")
                echo "vps4 version: ${VPS4_VERSION}"
                slackSend(color: '#00CD48', message: "vps4 Deploy To Production: *Restarting proxy manager service* on web proxy servers.")
                build job: 'restart_proxymgr_prod', parameters: [string(name: 'VPS4_VERSION', value: VPS4_VERSION)]
            }
        }

        stage("Prod SG2 Smoke Test") {
            options {
                timeout(time:45, unit:'MINUTES')
            }
            steps {
                load("/home/jenkins/vps4_latest_version.properties")
                echo "vps4 version: ${VPS4_VERSION}"
                build job: 'prod_sg2_phase_3_test', parameters: [string(name: 'VPS4_VERSION', value: VPS4_VERSION)]
                slackSend(color: '#00CD48', message: "Post Deploy *SG2 SMOKE TEST* was SUCCESSFUL. Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
            }
        }
        /*
        temporarily disabling due to timeout errors for openstack image
        stage("Prod A2 Smoke Test") {
            options {
                timeout(time:45, unit:'MINUTES')
            }
            steps {
                load("/home/jenkins/vps4_latest_version.properties")
                echo "vps4 version: ${VPS4_VERSION}"
                build job: 'prod_a2_phase_3_test', parameters: [string(name: 'VPS4_VERSION', value: VPS4_VERSION)]
                slackSend(color: '#00CD48', message: "Post Deploy *A2 SMOKE TEST* was SUCCESSFUL. Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
            }
        }
        */

        stage("Prod P3 Smoke Test") {
            options {
                timeout(time:45, unit:'MINUTES')
            }
            steps {
                load("/home/jenkins/vps4_latest_version.properties")
                echo "vps4 version: ${VPS4_VERSION}"
                build job: 'prod_p3_phase_3_test', parameters: [string(name: 'VPS4_VERSION', value: VPS4_VERSION)]
                slackSend(color: '#00CD48', message: "Post Deploy *P3 SMOKE TEST* was SUCCESSFUL. Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
            }
        }

        stage("Prod BOM Smoke Test") {
            options {
                timeout(time:45, unit:'MINUTES')
            }
            steps {
                load("/home/jenkins/vps4_latest_version.properties")
                echo "vps4 version: ${VPS4_VERSION}"
                build job: 'prod_bom_phase_3_test', parameters: [string(name: 'VPS4_VERSION', value: VPS4_VERSION)]
                slackSend(color: '#00CD48', message: "Post Deploy *BOM SMOKE TEST* was SUCCESSFUL. Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
            }
        }
    }
    post {
        success {
            cleanupEnvironment()
            slackSend(color: '#00CD48', message: "vps4 *DEPLOYMENT COMPLETE*. Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
        }
        failure {
            closeChangeRequest url:'https://godaddy.service-now.com/api/now/table/change_request',
                credentialsId:'2f9c93a6-a0a1-4b4f-bb56-f45590a033b1',
                status:'7'
            slackSend(color: '#ff0000', message: "*PROD DEPLOYMENT FAILURE*. Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
        }
    }
}

private void cleanupEnvironment() {
    if (currentBuild.currentResult == 'SUCCESS') {
        cleanWs cleanWhenAborted: false, cleanWhenFailure: false, cleanWhenNotBuilt: false, cleanWhenUnstable: false
    } else {
        echo "Skipping workspace cleanup due to errors in build"
    }
}

private void productStampZkAndWait(String targetEnv, String rpmName, String product) {
    productStampZk(targetEnv, rpmName, product, false)
}

private void productStampZk(String targetEnv, String rpmName, String product, Boolean quickdeploy=true) {
    echo "targetEnv: ${targetEnv}, rpmName: ${rpmName}, product: ${product}, quickdeploy: ${quickdeploy}"
    if (quickdeploy) {
        shell("/usr/bin/python ./cicd/vps4_zk_cicd.py -e ${targetEnv} -n ${rpmName} -p ${product} -q")
    } else {
        shell("/usr/bin/python ./cicd/vps4_zk_cicd.py -e ${targetEnv} -n ${rpmName} -p ${product}")
    }
}

private void shell(GString script) {
    if (this.sh(returnStatus: true, script: script)) {
        this.currentBuild.result = 'ERROR'
        this.error("Error running shell script")
    }
}

private void shell(String script) {
    this.shell("${script}")
}
