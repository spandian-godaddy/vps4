import hudson.model.*
import groovy.transform.Field

@Field def VPS4_VERSION
pipeline {
    agent { label "vps4-test-slave" }
    options {
        skipStagesAfterUnstable()
    }
    environment {
        SHOPPER_CREDS = credentials('jenkins-shopper-creds')
        ADMIN_CREDS = credentials('jenkins-admin-creds')
    }
    stages {
        stage("Daily full phase3 tests in test or stage") {
            steps {
                load("/home/jenkins/vps4_latest_version.properties")
                echo "vps4 version: ${VPS4_VERSION}"

                timeout(time:180, unit:'MINUTES') {
                    script {
                        def TEST_STATUS = sh (
                                script: 'set -o pipefail; '
                                        + "java -ea -jar '/opt/vps4/phase3_tests/vps4-phase3-tests-${VPS4_VERSION}.jar' "
                                        + "--api-url 'https://vps4.api.${API_ENV}-godaddy.com/' "
                                        + '--shopper "${SHOPPER_CREDS_USR}" --password "${SHOPPER_CREDS_PSW}" '
                                        + "--sso-url 'https://sso.${API_ENV}-godaddy.com/v1/api/token' "
                                        + '--admin "${ADMIN_CREDS_USR}" --admin-pass "${ADMIN_CREDS_PSW}" '
                                        + "--max-vms 28 --pool-size ${VM_COUNT} --vm-timeout 7200 "
                                        + "${env.ALL_OH_IMAGES.toBoolean() ? '--all-oh-images' : ''} "
                                        + "--images '${env.ADDITIONAL_IMAGES}' "
                                        + "--tests-to-run '${TESTS_TO_RUN}'"
                                        + "2>&1 | tee daily_phase3_${BUILD_NUMBER}.log",
                                returnStatus: true
                        )
                        if (TEST_STATUS != 0) {
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            cleanupEnvironment()
            slackSend(
                    color: '#00cd48',
                    message: "vps4 DAILY PHASE 3 TESTS *SUCCESS*. Job <${env.BUILD_URL}|${env.JOB_NAME} [${VPS4_VERSION}]>."
            )
        }
        failure {
            script {
                def FAILURE_LOGS = sh (
                        script: "cat daily_phase3_${BUILD_NUMBER}.log | "
                                + "awk '/<<<</{flag=1;next}/>>>>/{flag=0}flag' | "
                                + "grep -E 'combined result|FAIL'",
                        returnStdout: true
                ).trim()
                slackSend(
                        color: '#ff0000',
                        message: "vps4 DAILY PHASE 3 TESTS *FAILURE*. Job <${env.BUILD_URL}|${env.JOB_NAME} [${VPS4_VERSION}]>.\n```${FAILURE_LOGS}```"
                )
            }
        }
    }
}

private void cleanupEnvironment() {
    if (currentBuild.currentResult == 'SUCCESS') {
        cleanWs cleanWhenAborted: false, cleanWhenFailure: false, cleanWhenNotBuilt: false, cleanWhenUnstable: false
    } else {
        echo "Skipping workspace cleanup due to errors in build"
    }
}
