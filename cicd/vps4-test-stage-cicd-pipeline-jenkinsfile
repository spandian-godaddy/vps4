import hudson.model.*
import groovy.transform.Field

@Field def VPS4_VERSION
pipeline {
    agent { label "vps4-test-slave" }
    options { 
        skipStagesAfterUnstable()
        timestamps()
    }
    stages {
        stage('Build') {
            steps {
                slackSend(color: '#00CD48', message: "vps4 *STARTING NEW BUILD*. Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
                git credentialsId: '0e6be54c-e8ae-42d2-b651-6758042e282b', url: 'git@github.secureserver.net:vps4/vps4.git'
                build job: 'vps4'
                load("/home/jenkins/vps4_latest_version.properties")
                echo "vps4 version: ${VPS4_VERSION}"
                slackSend(color: '#00CD48', message: "vps4 *BUILD* was successful. Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
            }
        }
        stage("Deploy") {
            parallel {
                stage("Deploy to Test") {
                    steps {
                        load("/home/jenkins/vps4_latest_version.properties")
                        echo "vps4 version: ${VPS4_VERSION}"
                        build job: 'deploy_to_test', parameters: [string(name: 'VPS4_VERSION', value: VPS4_VERSION)]
                        productStampZk("test", "vps4-web-${VPS4_VERSION}.noarch", "vps4-web")
                        productStampZk("test", "vps4-message-consumer-${VPS4_VERSION}.noarch", "vps4-message-consumer")
                        productStampZk("test", "vps4-orchestration-plugin-${VPS4_VERSION}.noarch", "hfs-engine")
                        productStampZk("test", "vps4-scheduler-${VPS4_VERSION}.noarch", "vps4-scheduler")
                        slackSend(color: '#00CD48', message: "vps4 *DEPLOY TO TEST* was SUCCESSFUL. Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
                    }
                }
                stage("Deploy to Stage") {            
                    steps {
                        load("/home/jenkins/vps4_latest_version.properties")
                        echo "vps4 version: ${VPS4_VERSION}"
                        build job: 'deploy_to_stage', parameters: [string(name: 'VPS4_VERSION', value: VPS4_VERSION)]
                        productStampZk("stage", "vps4-web-${VPS4_VERSION}.noarch", "vps4-web")
                        productStampZk("stage", "vps4-message-consumer-${VPS4_VERSION}.noarch", "vps4-message-consumer")
                        productStampZk("stage", "vps4-orchestration-plugin-${VPS4_VERSION}.noarch", "hfs-engine")
                        productStampZk("stage", "vps4-scheduler-${VPS4_VERSION}.noarch", "vps4-scheduler")
                        slackSend(color: '#00CD48', message: "vps4 *DEPLOY TO STAGE* was SUCCESSFUL. Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
                    }
                }
            }
        }
        stage("Phase3 Stage") {
            options {
                timeout(time: 45, unit: 'MINUTES')
                retry(1)
            }
            steps {
                load("/home/jenkins/vps4_latest_version.properties")
                echo "vps4 version: ${VPS4_VERSION}"
                timeout(time:45, unit:'MINUTES') {
                    build job: 'stage_phase_3_test', parameters: [string(name: 'VPS4_VERSION', value: VPS4_VERSION)]
                }
                slackSend(color: '#00CD48', message: "vps4 *PHASE 3 TESTS* in stage env were SUCCESSFUL. Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
            }
        }
    }
    post {
        success {
            cleanupEnvironment()
            slackSend(color: '#00CD48', message: "vps4 *TEST/STAGE DEPLOYMENT COMPLETE*. Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
        }
        failure {
            slackSend(color: '#ff0000', message: "*ERROR*: Job '${env.JOB_NAME} [${VPS4_VERSION}]' (${env.BUILD_URL})")
        }
    }
}

private void cleanupEnvironment() {
    if (currentBuild.currentResult == 'SUCCESS') {
        cleanWs cleanWhenAborted: false, cleanWhenFailure: false, cleanWhenNotBuilt: false, cleanWhenUnstable: false
    } else {
        echo "Skipping workspace cleanup due to errors in build"
    }
}

private void productStampZk(String targetEnv, String rpmName, String product) {
    echo "targetEnv: ${targetEnv}, rpmName: ${rpmName}, product: ${product}"
    shell("/usr/bin/python ./cicd/vps4_zk_cicd.py -e ${targetEnv} -n ${rpmName} -p ${product}")
}

private void shell(GString script) {
    if (this.sh(returnStatus: true, script: script)) {
        this.currentBuild.result = 'ERROR'
        this.error("Error running shell script")
    }
}

private void shell(String script) {
    this.shell("${script}")
}
